#!/bin/bash

# selects an option (see next function)
function select_opt {
    select_option "$@" 1>&2
    local result=$?
    echo $result
    return $result
}

# Interactive dialog for shells (select from list)
# 
# Renders a text based list of options that can be selected by the
# user using up, down and enter keys and returns the chosen option.
#
#   Arguments   : list of options, maximum of 256
#                 "opt1" "opt2" ...
#   Return value: selected index (0 for opt1, 1 for opt2 ...)
# 
function select_option {
    local ESC="\033"
    function cursor_blink_on    { printf "${ESC}[?25h"; }
    function cursor_blink_off   { printf "${ESC}[?25l"; }
    function cursor_to          { local curpos="${ESC}[$1;${2:-1}H"; printf "$curpos"; }
    function print_option       { printf "                           $1 "; }
    function print_selected     { printf "                          ${ESC}[7m $1 ${ESC}[27m"; }
    function get_cursor_row     {
        echo -ne "${ESC}[6n" > /dev/tty
        read -t 1 -s -d 'R' cursorline < /dev/tty
        cursorline="${cursorline##*\[}"
        echo "${cursorline%;*}"
    }
    function key_input          {
        key=$(bash -c "read -s -n 3 c; echo \$c")
        key="${key##*\[}"
        if [[ $key == "A" ]];   then echo "up";     break; fi
        if [[ $key == "B" ]];   then echo "down";   break; fi
        key="${key##*015}"
        if [[ $key == "" ]];    then echo "return"; break; fi
    }

    # initially print empty new lines (scroll down if at bottom of screen)
    for opt; do printf "\n"; done

    # determine current screen position for overwriting the options
    local lastrow=$(get_cursor_row)
    lastrow="${lastrow##*\[*n}"
    local startrow=$(($lastrow - $#))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" SIGINT
    cursor_blink_off

    local selected=0

    while : ; do
        # print options by overwriting the last lines
        local idx=0
        for opt; do
            local currow=$(($startrow + $idx))
            cursor_to $currow
            if [ $idx -eq $selected ]; then
                print_selected "$opt"
            else
                print_option "$opt"
            fi
            ((idx++))
        done

        # user key control
        local user_input=$(key_input)
        case $user_input in
            return) break;;
            up)    ((selected--));
                   [ $selected -lt 0 ] && selected=$(($# - 1));;
            down)  ((selected++));
                   [ $selected -ge $# ] && selected=0;;
        esac
    done

    # cursor position back to normal
    cursor_to $lastrow
    printf "\n"
    cursor_blink_on

    return $((selected + 1))
}
